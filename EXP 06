#include <stdio.h>

struct Process {
    int id, burst_time, priority, arrival_time, remaining_burst, waiting_time, turnaround_time;
};

void preemptivePriorityScheduling(struct Process proc[], int n) {
    int time = 0, completed = 0;
    while (completed < n) {
        int idx = -1, highest_priority = 99999;
        for (int i = 0; i < n; i++) {
            if (proc[i].arrival_time <= time && proc[i].remaining_burst > 0 && proc[i].priority < highest_priority) {
                highest_priority = proc[i].priority;
                idx = i;
            }
        }

        if (idx != -1) {
            proc[idx].remaining_burst--;
            time++;

            if (proc[idx].remaining_burst == 0) {
                completed++;
                proc[idx].turnaround_time = time - proc[idx].arrival_time;
                proc[idx].waiting_time = proc[idx].turnaround_time - proc[idx].burst_time;
            }
        } else {
            time++;
        }
    }

    // Display Results
    int total_waiting_time = 0, total_turnaround_time = 0;
    printf("\nProcess ID\tBurst Time\tArrival Time\tPriority\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", proc[i].id, proc[i].burst_time, proc[i].arrival_time, 
               proc[i].priority, proc[i].waiting_time, proc[i].turnaround_time);
        total_waiting_time += proc[i].waiting_time;
        total_turnaround_time += proc[i].turnaround_time;
    }

    printf("\nAverage Waiting Time: %.2f", (float)total_waiting_time / n);
    printf("\nAverage Turnaround Time: %.2f\n", (float)total_turnaround_time / n);
}

int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    struct Process proc[n];

    for (int i = 0; i < n; i++) {
        proc[i].id = i + 1;
        printf("Enter Arrival Time, Burst Time, and Priority for Process[%d]: ", i + 1);
        scanf("%d %d %d", &proc[i].arrival_time, &proc[i].burst_time, &proc[i].priority);
        proc[i].remaining_burst = proc[i].burst_time; // Initialize remaining burst time
    }

    // Sorting by Arrival Time, then Priority
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (proc[i].arrival_time > proc[j].arrival_time || 
               (proc[i].arrival_time == proc[j].arrival_time && proc[i].priority > proc[j].priority)) {
                struct Process temp = proc[i];
                proc[i] = proc[j];
                proc[j] = temp;
            }
        }
    }

    preemptivePriorityScheduling(proc, n);
    return 0;
}
